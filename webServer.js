"use strict";

/* jshint node: true */

/*
 * This webserver listens, alternatively, to port 3000 for testing on LOCALHOST:3000
 * or to process.env.PORT, the environment variable generated by Heroku for the port 
 * for this instance of the server.
 *
 * To start the webserver run the command:
 *    node webServer.js
 *
 * Note that anyone able to connect to localhost:portNo will be able to fetch any file accessible
 * to the current user in the current directory or any of its children.
 *
 *
 */

/*
 * Initialize node modules.
 */
var mongoose = require('mongoose');
var async = require('async');
var session = require('express-session');
var bodyParser = require('body-parser');
var multer = require('multer');
var processFormBody = multer({storage: multer.memoryStorage()}).single('uploadedphoto');
var fs = require("fs");


// Load the Mongoose schema for User, Photo, and SchemaInfo
var User = require('./schema/user.js');
var SchemaInfo = require('./schema/schemaInfo.js');

var express = require('express');
var app = express();

/* Connect to mLab Mongoose using the secret environment variable generated by 
 * Heroku for this instance. */
const mongoURI = process.env.MONGODB_URI;
mongoose.connect(mongoURI);

// We have the express static module (http://expressjs.com/en/starter/static-files.html) do all
// the work for us.
app.use(express.static(__dirname));
// For the session we give it the key, and other parameters that it needs to know
// in order for the program to start using it. Session is used for maintaining 
// session state across different request handlers, so you can know whether or not
// a user is logged in.
app.use(session({
    //secret: 'secretKey', 
    secret: process.env.SECRET_KEY,
    resave: false,
    saveUninitialized: false
}));

// bodyParser is used in photo uploads. 
app.use(bodyParser.json());

app.get('/', function (request, response) {
    response.send('Simple web server of files from ' + __dirname);
});

app.get('/session', function(request, response) {

    if (request.session.login_name) {
        response.end(JSON.stringify(true));
    } else {
        response.end(JSON.stringify(false));
    }
});

/***********************************
 * Login and Registration Handling *
 ***********************************/

/* If a user has entered a valid login_name and password combination,
 * logs in as that account. 
 */
app.post('/admin/login', function (request, response) {

    var username = request.body.login_name;
    var password = request.body.password;

    // Try to find a user with that login_name
    User.findOne({login_name: username, password: password}, function (err, user) {
        if (err) {
            // Query returned an error.
            response.status(400).send(JSON.stringify(err));
            return;
        }
        // If no user found, report an error.
        if (!user) {
            response.status(400).send('Missing user');
            return;
        }
        if (user.length === 0) {
            // Query didn't return an error but didn't find the SchemaInfo object - This
            // is also an internal error return.
            console.log("user.length === 0");
            response.status(400).send('Missing user');
            return;
        }

        // Create new session, which will be part of the request, so we have access on all routes
        request.session.login_name = username;
        request.session.user_id = user._id;
        request.session.user = user;

        // Send session back
        console.log('user', user);
        //response.send(session);
        response.end(JSON.stringify(user));
    }); 
});

// Logout from the current account
app.post('/admin/logout', function (request, response) {

    if (!request.session.login_name) {
        response.status(401).send("No user logged in");
        return;
    } else {
        request.session.destroy(function (err) {
            if (err) {
                response.status(500).send(err);
                return;
            }
            response.send("Logout success");
        });
    }
});

// Register a new user
app.post('admin/register', function (request, response) {

    console.log("app.post: registering a new user");

    // If a user with the entered login name already exists, return an error
    User.findOne({login_name: request.body.login_name}, function (err, user) {
        if (user) {
            response.status(400).send('That user already exists');
            return;
        }
    });

    var user_attributes = {
        email_address: request.body.email_address, // Email Address / Login
        first_name: request.body.first_name, // First name of the user.
        last_name: request.body.last_name,  // Last name of the user.
        description: request.body.description,  // A brief user description
        password: request.body.password, // The password of the user
    };

    User.create(user_attributes, doneCallback);

    function doneCallback(err, newUser) {
        console.log("Created userObject with ID", newUser._id);
        response.end(JSON.stringify(newUser));
    };
});

var server = app.listen(process.env.PORT || 3000, function () {
    var port = server.address().port;
    console.log('Listening at port' + port + ' exporting the directory ' + __dirname);
});


