"use strict";

/* jshint node: true */

/*
 * This webserver listens, alternatively, to port 3000 for testing on LOCALHOST:3000
 * or to process.env.PORT, the environment variable generated by Heroku for the port 
 * for this instance of the server.
 *
 * To start the webserver run the command:
 *    node webServer.js
 *
 * Note that anyone able to connect to localhost:portNo will be able to fetch any file accessible
 * to the current user in the current directory or any of its children.
 *
 *
 */

/*
 * Initialize node modules.
 */
var mongoose = require('mongoose');
var async = require('async');
var session = require('express-session');
var bodyParser = require('body-parser');
var multer = require('multer');
var processFormBody = multer({storage: multer.memoryStorage()}).single('uploadedphoto');
var fs = require("fs");


// TODO: Load the Mongoose schema for User, Photo, and SchemaInfo
// var User = require('./schema/user.js');
// var Photo = require('./schema/photo.js');
// var SchemaInfo = require('./schema/schemaInfo.js');

var express = require('express');
var app = express();

/* Connect to mLab Mongoose using the secret environment variable generated by 
 * Heroku for this instance. */
// const mongoURI = process.env.MONGODB_URI;
// mongoose.connect(mongoURI);

// We have the express static module (http://expressjs.com/en/starter/static-files.html) do all
// the work for us.
app.use(express.static(__dirname));
// For the session we give it the key, and other parameters that it needs to know
// in order for the program to start using it. Session is used for maintaining 
// session state across different request handlers, so you can know whether or not
// a user is logged in.
app.use(session({secret: 'secretKey', resave: false, saveUninitialized: false}));

// bodyParser is used in photo uploads. 
app.use(bodyParser.json());

app.get('/', function (request, response) {
    response.send('Simple web server of files from ' + __dirname);
});

app.get('/session', function(request, response) {

    if (request.session.login_name) {
        response.end(JSON.stringify(true));
    } else {
        response.end(JSON.stringify(false));
    }
});

var server = app.listen(process.env.PORT || 3000, function () {
    var port = server.address().port;
    console.log('Listening at port' + port + ' exporting the directory ' + __dirname);
});


